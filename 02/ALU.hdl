// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	// Put you code here:
	
	/* x-logic part
	 * x_in -->	zx	nx	||	x_out
	 *			------------------
	 *			0	0	||	x
	 *			0	1	||	!x		-> use Not(x) as one input
	 *			1	0	||	0[16]	-> use false as one input
	 *			1	1	||	1[16]	-> use true as one input
	 * implement using 4-way 16-bit Mux with zx and nx as selectors
	 */
	Not16(in=x, out=notx);
	Mux4Way16(a=x, b=notx, sel[0]=nx, sel[1]=zx, out=xout);
	
	/* y-logic part
	 * y_in -->	zy	ny	||	y_out
	 *			------------------
	 *			0	0	||	y
	 *			0	1	||	!y		-> use Not(y) as one input
	 *			1	0	||	0[16]	-> use false as one input
	 *			1	1	||	1[16]	-> use true as one input
	 * implement using 4-way 16-bit Mux with zy and ny as selectors
	 */
	Not16(in=y, out=noty);
	Mux4Way16(a=y, b=noty, sel[0]=ny, sel[1]=zy, out=yout);
	
	/* Implementing f functionality
	 * Selection of x+y or x&y can be implemented using a 16-bit Mux
	 */
	Add16(a=xout, b=yout, out=sumxy);
	And16(a=xout, b=yout, out=xandy);
	Mux16(a=xandy, b=sumxy, sel=f, out=function);
	
	/* Implementing no function
	 * Can be implemented using a Mux, too
	 */
	Not16(in=function, out=notf);
	Mux16(a=function, b=notf, sel=no, out=out, out=final);
	
	/* Implementing the flags zr and ng
	 */
	Not16(in=final, out=notfinal);
	And16(a=notfinal, b=false, out=zr);
	
	/* In 2's complement, MSB of a negative number is 1
	 */
	And(a=final[15], b=true, out=ng);
}